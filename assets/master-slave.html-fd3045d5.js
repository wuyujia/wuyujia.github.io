import{_ as a,W as e,X as s,a2 as n}from"./framework-aa83d01c.js";const i={},l=n(`<h2 id="当前状态" tabindex="-1"><a class="header-anchor" href="#当前状态" aria-hidden="true">#</a> 当前状态</h2><p>线上数据库只有一主 + Canal的情况下，需要增加一个从节点，不管是作为灾备还是做读写分离，都是很有必要的</p><p>Master数据库版本：5.7.27-log Slave也需要按这个版本进行安装</p><h2 id="操作步骤" tabindex="-1"><a class="header-anchor" href="#操作步骤" aria-hidden="true">#</a> 操作步骤</h2><h3 id="_1-从节点下载mysql服务端" tabindex="-1"><a class="header-anchor" href="#_1-从节点下载mysql服务端" aria-hidden="true">#</a> 1. 从节点下载MySQL服务端</h3><p>使用SCP命令将master节点的安装包发给slave节点，也可以从网上下载</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">scp</span> ./mysql-5.7.27-linux-glibc2.12-x86_64.tar.gz <span class="token number">172.10</span>.0.2:/usr/local/src 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>等待传输完成，切换到 slave 机器上进行解压</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">cd</span> /usr/local/src <span class="token operator">&amp;&amp;</span> <span class="token function">tar</span> <span class="token parameter variable">-zxvf</span> mysql-5.7.27-linux-glibc2.12-x86_64.tar.gz
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>将得到目录：<code>mysql-5.7.27-linux-glibc2.12-x86_64</code> 将目录更名，并移动至 /usr/local/mysql</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">mv</span> mysql-5.7.27-linux-glibc2.12-x86_64 mysql <span class="token operator">&amp;&amp;</span> <span class="token function">mv</span> ./mysql /usr/local
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_2-创建my-cnf" tabindex="-1"><a class="header-anchor" href="#_2-创建my-cnf" aria-hidden="true">#</a> 2. 创建my.cnf</h3><p>复制master的<code>/etc/my.cnf</code>文件到slave的<code>/etc/my.cnf</code>中</p><div class="hint-container warning"><p class="hint-container-title">注意</p><p>注意修改一下server-id的值，从节点必须和主节点不同</p></div><h3 id="_3-初始化数据库" tabindex="-1"><a class="header-anchor" href="#_3-初始化数据库" aria-hidden="true">#</a> 3. 初始化数据库</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 默认会自动读取 /etc/my.cnf 的信息，无需额外参数即可</span>
mysqld <span class="token parameter variable">--initialize</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>查看初始化密码</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>cat 在/etc/my.cnf中配置的log_error参数
找到 [Note] A temporary password is generated for root@localhost 后面的值为密码
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-修改root密码" tabindex="-1"><a class="header-anchor" href="#_4-修改root密码" aria-hidden="true">#</a> 4. 修改root密码</h3><p>登录mysql</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>mysql <span class="token parameter variable">-p</span>
<span class="token comment"># 输入密码</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>修改root密码</p><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code># 修改密码
alter user &#39;root&#39;@&#39;localhost&#39; identified by &#39;你的密码&#39;; 
# 刷新权限
flush privileges;
# 退出
exit
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5-master数据拷贝" tabindex="-1"><a class="header-anchor" href="#_5-master数据拷贝" aria-hidden="true">#</a> 5. master数据拷贝</h3><p>将master的事实数据导出，拷贝至slave 有两种方案：</p><ol><li>mysqldump：逻辑备份，数据量大时，备份速度会很慢，锁表的时间也会很长。</li><li>xtrabackup：物理备份，备份速度快，不锁表。为什么不锁表？因为自身会监控主库日志，如果有更新的数据，就会先写到一个文件中，然后再回归到备份文件中，从而保持数据一致性。</li></ol><p>由于是生产服务器，所以采用<code>方案2</code></p><p>安装 <code>XtraBackup</code></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># yum源安装</span>
yum <span class="token function">install</span> https://repo.percona.com/yum/percona-release-latest.noarch.rpm

yum list <span class="token operator">|</span> <span class="token function">grep</span> percona-xtrabackup-24
<span class="token comment"># 如果存在，则进行安装</span>
yum <span class="token function">install</span> percona-xtrabackup-24
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container info"><p class="hint-container-title">tips</p><p>两台机器都要安装哦</p></div><p>数据备份</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>innobackupex <span class="token parameter variable">--user</span><span class="token operator">=</span>root <span class="token parameter variable">--password</span><span class="token operator">=</span><span class="token variable">$DB_PD</span> ./
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>备份完成之后，会在当前目录下产生一个当前日期时间的文件夹，这个文件夹就是备份内容</p><p>将文件进行压缩</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">tar</span> <span class="token parameter variable">-zcvf</span> backup.tar.gz ./日期文件 --remove-files
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_6-迁移文件并恢复" tabindex="-1"><a class="header-anchor" href="#_6-迁移文件并恢复" aria-hidden="true">#</a> 6. 迁移文件并恢复</h3><p>将压缩文件传输至slave节点</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">scp</span> ./backup.tar.gz <span class="token number">172.16</span>.100.16:/tmp
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>将数据进行恢复，恢复之前记得先停止节点</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">service</span> mysqld stop
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>解压文件, 并恢复内容</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 第一步 解压</span>
<span class="token builtin class-name">cd</span> /tmp <span class="token operator">&amp;&amp;</span> <span class="token function">tar</span> <span class="token parameter variable">-zxvf</span> ./backup.tar.gz
<span class="token comment"># 第二步 恢复应用日志</span>
innobackupex <span class="token parameter variable">--user</span><span class="token operator">=</span>root <span class="token parameter variable">--password</span><span class="token operator">=</span><span class="token variable">$DB_PD</span> --apply-log --use-memory<span class="token operator">=</span>4G ./解压出来的目录/
<span class="token comment"># 第三步 恢复拷贝文件 要确保数据目录是空的</span>
innobackupex <span class="token parameter variable">--user</span><span class="token operator">=</span>root <span class="token parameter variable">--password</span><span class="token operator">=</span><span class="token variable">$DB_PD</span> --copy-back ./2023-12-05_11-46-02/
<span class="token comment"># 第四步 检查恢复完的数据权限是否是mysql</span>
<span class="token builtin class-name">cd</span> /data/3306 <span class="token operator">&amp;&amp;</span> <span class="token function">chown</span> <span class="token parameter variable">-R</span> mysql.mysql ./*
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中</p><blockquote><p>--defaults-file=/etc/my.cnf 恢复会使用my.cnf文件把需要恢复的文件，恢复到my.cnf指定的位置。<br> --apply-log 这是备份时产生的日志，<br> --copy-back 这是备份源，解压后的备份文件。<br> --use-memory=4G 为了加快恢复速度,设置可用内存参数</p></blockquote><p>启动服务</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">service</span> mysqld start
<span class="token comment"># 确认服务是否启动成功 应该会成功的</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>查看同步起点</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">cat</span> xtrabackup_binlog_info
mysql-bin.000373        <span class="token number">861304970</span>       11ee986b-0512-11ea-a00c-5254008e708a:1-413438727
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_7-启动从节点同步" tabindex="-1"><a class="header-anchor" href="#_7-启动从节点同步" aria-hidden="true">#</a> 7. 启动从节点同步</h3><p>在主节点创建用户</p><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>grant replication slave on *.* to slave@&#39;172.30.100.16&#39; identified by &#39;slave&#39;;
flush privileges;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>进入slave的mysql</p><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code># 配置主节点 一定要保证从节点用的slave账户在主节点存在并有效
change master to master_host=&#39;172.30.100.17&#39;, master_user=&#39;slave&#39;, master_password=&#39;slave&#39;, master_log_file=&#39;mysql-bin.000373&#39;, master_log_pos=861304970;

# 启动同步
start slave;

# 查看状态
show slave status\\G
# 从 Seconds_Behind_Master 属性中，如果为0，则表示正常，如果为正值且很大则表示延迟很大

# 从节点设置为只读
set global read_only=1;
set global super_read_only = 1;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_8-创建只读账户" tabindex="-1"><a class="header-anchor" href="#_8-创建只读账户" aria-hidden="true">#</a> 8. 创建只读账户</h3><p>创建用户</p><div class="language-msyql line-numbers-mode" data-ext="msyql"><pre class="language-msyql"><code>grant select on tb_prod.* to db_reader@&#39;172.30.100.16&#39; identified by &#39;xxxxx&#39;;
flush privileges;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>回收用户</p><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>revoke select on tb_prod.* from db_reader@&#39;172.30.100.16&#39;;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,58),d=[l];function r(c,t){return e(),s("div",null,d)}const o=a(i,[["render",r],["__file","master-slave.html.vue"]]);export{o as default};
