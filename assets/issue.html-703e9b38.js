import{_ as t,W as e,X as p,Y as n,Z as a,$ as o,a1 as l,C as c}from"./framework-817d905c.js";const u={},i=l(`<h2 id="常见问题" tabindex="-1"><a class="header-anchor" href="#常见问题" aria-hidden="true">#</a> 常见问题</h2><h3 id="typehandler不起作用" tabindex="-1"><a class="header-anchor" href="#typehandler不起作用" aria-hidden="true">#</a> TypeHandler不起作用</h3><p>自定义类型处理器通过<code>@TableFiled</code>字段标注并配置属性<code>typeHandler</code>之后，在查询结果时，没有走TypeHandler，原因是没有开启结果映射，通过下面两种方式开启</p><ol><li>如果是通过在xml中书写sql，则一定要在xml配置结果映射，例如：</li></ol><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resultMap</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>BeanType<span class="token punctuation">&quot;</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>BeanId<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>f_prop<span class="token punctuation">&quot;</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>f_prop<span class="token punctuation">&quot;</span></span> <span class="token attr-name">javaType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>BeanType<span class="token punctuation">&quot;</span></span>
                <span class="token attr-name">jdbcType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>VARCHAR<span class="token punctuation">&quot;</span></span> <span class="token attr-name">typeHandler</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>TypeHandler<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resultMap</span><span class="token punctuation">&gt;</span></span>      
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>如果调用MyBatis原生方法，则可以通过在<code>@TableName</code>注解中开启<code>autoResultMap = true</code>配置来进行自动映射</li></ol><div class="hint-container info"><p class="hint-container-title">提示</p><p>这种情况针对仅有少量字段定义结果处理器比较有效</p></div><h3 id="查询字段丢失问题" tabindex="-1"><a class="header-anchor" href="#查询字段丢失问题" aria-hidden="true">#</a> 查询字段丢失问题</h3>`,8),r=n("code",null,"select *",-1),d=n("code",null,"*",-1),k={href:"https://blog.csdn.net/Cleverlove_/article/details/120165108",target:"_blank",rel:"noopener noreferrer"};function h(m,v){const s=c("ExternalLinkIcon");return e(),p("div",null,[i,n("p",null,[a("MyBatis-Plus与Sharding-JDBC结合使用后发现"),r,a("语句出现了字段丢失现象，还不清楚原因 解决办法： 补全"),d,a("对应的字段 有关blog: "),n("a",k,[a("Mybatis中查询结果字段丢失的问题"),o(s)])])])}const q=t(u,[["render",h],["__file","issue.html.vue"]]);export{q as default};
