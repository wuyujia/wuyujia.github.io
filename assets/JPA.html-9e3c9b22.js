import{_ as n,W as s,X as a,a2 as t}from"./framework-aa83d01c.js";const p={},o=t(`<p>JPA 自动生成 POJO 类的脚本</p><div class="language-groovy line-numbers-mode" data-ext="groovy"><pre class="language-groovy"><code><span class="token keyword">import</span> com<span class="token punctuation">.</span>intellij<span class="token punctuation">.</span>database<span class="token punctuation">.</span>model<span class="token punctuation">.</span>DasTable
<span class="token keyword">import</span> com<span class="token punctuation">.</span>intellij<span class="token punctuation">.</span>database<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Case
<span class="token keyword">import</span> com<span class="token punctuation">.</span>intellij<span class="token punctuation">.</span>database<span class="token punctuation">.</span>util<span class="token punctuation">.</span>DasUtil

<span class="token comment">/*
 * Available context bindings:
 *   SELECTION   Iterable&lt;DasObject&gt;
 *   PROJECT     project
 *   FILES       files helper
 */</span>

packageName <span class="token operator">=</span> <span class="token interpolation-string"><span class="token string">&quot;com.tb.srdc.mysql.entity;&quot;</span></span>
typeMapping <span class="token operator">=</span> <span class="token punctuation">[</span>
  <span class="token punctuation">(</span><span class="token operator">~</span><span class="token interpolation-string"><span class="token string">/(?i)int/</span></span><span class="token punctuation">)</span>                      <span class="token punctuation">:</span> <span class="token interpolation-string"><span class="token string">&quot;long&quot;</span></span><span class="token punctuation">,</span>
  <span class="token punctuation">(</span><span class="token operator">~</span><span class="token interpolation-string"><span class="token string">/(?i)float|double|decimal|real/</span></span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token interpolation-string"><span class="token string">&quot;double&quot;</span></span><span class="token punctuation">,</span>
  <span class="token punctuation">(</span><span class="token operator">~</span><span class="token interpolation-string"><span class="token string">/(?i)datetime|timestamp/</span></span><span class="token punctuation">)</span>       <span class="token punctuation">:</span> <span class="token interpolation-string"><span class="token string">&quot;java.sql.Timestamp&quot;</span></span><span class="token punctuation">,</span>
  <span class="token punctuation">(</span><span class="token operator">~</span><span class="token interpolation-string"><span class="token string">/(?i)date/</span></span><span class="token punctuation">)</span>                     <span class="token punctuation">:</span> <span class="token interpolation-string"><span class="token string">&quot;java.sql.Date&quot;</span></span><span class="token punctuation">,</span>
  <span class="token punctuation">(</span><span class="token operator">~</span><span class="token interpolation-string"><span class="token string">/(?i)time/</span></span><span class="token punctuation">)</span>                     <span class="token punctuation">:</span> <span class="token interpolation-string"><span class="token string">&quot;java.sql.Time&quot;</span></span><span class="token punctuation">,</span>
  <span class="token punctuation">(</span><span class="token operator">~</span><span class="token interpolation-string"><span class="token string">/(?i)/</span></span><span class="token punctuation">)</span>                         <span class="token punctuation">:</span> <span class="token interpolation-string"><span class="token string">&quot;String&quot;</span></span>
<span class="token punctuation">]</span>

FILES<span class="token punctuation">.</span><span class="token function">chooseDirectoryAndSave</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">&quot;Choose directory&quot;</span></span><span class="token punctuation">,</span> <span class="token interpolation-string"><span class="token string">&quot;Choose where to store generated files&quot;</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span> dir <span class="token operator">-&gt;</span>
  SELECTION<span class="token punctuation">.</span>filter <span class="token punctuation">{</span> it <span class="token keyword">instanceof</span> <span class="token class-name">DasTable</span> <span class="token punctuation">}</span><span class="token punctuation">.</span>each <span class="token punctuation">{</span> <span class="token function">generate</span><span class="token punctuation">(</span>it<span class="token punctuation">,</span> dir<span class="token punctuation">)</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">def</span> <span class="token function">generate</span><span class="token punctuation">(</span>table<span class="token punctuation">,</span> dir<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">def</span> className <span class="token operator">=</span> <span class="token function">javaClassName</span><span class="token punctuation">(</span>table<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span>
  <span class="token keyword">def</span> fields <span class="token operator">=</span> <span class="token function">calcFields</span><span class="token punctuation">(</span>table<span class="token punctuation">)</span>
  <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>dir<span class="token punctuation">,</span> className <span class="token operator">+</span> <span class="token interpolation-string"><span class="token string">&quot;.java&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">.</span>withPrintWriter <span class="token punctuation">{</span> out <span class="token operator">-&gt;</span> <span class="token function">generate</span><span class="token punctuation">(</span>out<span class="token punctuation">,</span> table<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> className<span class="token punctuation">,</span> fields<span class="token punctuation">)</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">def</span> <span class="token function">generate</span><span class="token punctuation">(</span>out<span class="token punctuation">,</span> tableName<span class="token punctuation">,</span> className<span class="token punctuation">,</span> fields<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  out<span class="token punctuation">.</span>println <span class="token interpolation-string"><span class="token string">&quot;package </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">packageName</span></span><span class="token string">&quot;</span></span>
  out<span class="token punctuation">.</span>println <span class="token interpolation-string"><span class="token string">&quot;&quot;</span></span>
  out<span class="token punctuation">.</span>println <span class="token interpolation-string"><span class="token string">&quot;import lombok.Data;&quot;</span></span>
  out<span class="token punctuation">.</span>println <span class="token interpolation-string"><span class="token string">&quot;import javax.persistence.*;&quot;</span></span>
  Set types <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  fields<span class="token punctuation">.</span><span class="token function">each</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      types<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>it<span class="token punctuation">.</span>type<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>types<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">&quot;Date&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      out<span class="token punctuation">.</span>println <span class="token interpolation-string"><span class="token string">&quot;import java.util.Date;&quot;</span></span>
  <span class="token punctuation">}</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>types<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">&quot;BigDecimal&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      out<span class="token punctuation">.</span>println <span class="token interpolation-string"><span class="token string">&quot;import java.math.BigDecimal;&quot;</span></span>
  <span class="token punctuation">}</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>types<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">&quot;InputStream&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      out<span class="token punctuation">.</span>println <span class="token interpolation-string"><span class="token string">&quot;import java.io.InputStream;&quot;</span></span>
  <span class="token punctuation">}</span>
  out<span class="token punctuation">.</span>println <span class="token interpolation-string"><span class="token string">&quot;&quot;</span></span>
  out<span class="token punctuation">.</span>println <span class="token interpolation-string"><span class="token string">&quot;@Data&quot;</span></span>
  out<span class="token punctuation">.</span>println <span class="token interpolation-string"><span class="token string">&quot;@Entity&quot;</span></span>
  out<span class="token punctuation">.</span>println <span class="token interpolation-string"><span class="token string">&quot;@Table(name = \\&quot;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">tableName</span></span><span class="token string">\\&quot;)&quot;</span></span>
  out<span class="token punctuation">.</span>println <span class="token interpolation-string"><span class="token string">&quot;public class </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">className</span></span><span class="token string"> {&quot;</span></span>
  out<span class="token punctuation">.</span>println <span class="token interpolation-string"><span class="token string">&quot;&quot;</span></span>
  out<span class="token punctuation">.</span>println <span class="token function">genSerialID</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  out<span class="token punctuation">.</span>println <span class="token interpolation-string"><span class="token string">&quot;&quot;</span></span>
  fields<span class="token punctuation">.</span><span class="token function">each</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// 输出注释</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isNotEmpty</span><span class="token punctuation">(</span>it<span class="token punctuation">.</span>comment<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          out<span class="token punctuation">.</span>println <span class="token interpolation-string"><span class="token string">&quot;\\t/**&quot;</span></span>
          out<span class="token punctuation">.</span>println <span class="token interpolation-string"><span class="token string">&quot;\\t * </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token expression">it<span class="token punctuation">.</span>comment<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot;</span></span>
          out<span class="token punctuation">.</span>println <span class="token interpolation-string"><span class="token string">&quot;\\t */&quot;</span></span>
      <span class="token punctuation">}</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>it<span class="token punctuation">.</span>annos<span class="token operator">+</span><span class="token interpolation-string"><span class="token string">&quot;&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">&quot;[@Id]&quot;</span></span><span class="token punctuation">)</span> <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            out<span class="token punctuation">.</span>println <span class="token interpolation-string"><span class="token string">&quot;\\t@Id&quot;</span></span>
            out<span class="token punctuation">.</span>println <span class="token interpolation-string"><span class="token string">&quot;\\t@GeneratedValue(strategy = GenerationType.IDENTITY)&quot;</span></span>
      <span class="token punctuation">}</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>it<span class="token punctuation">.</span>annos <span class="token operator">!=</span> <span class="token interpolation-string"><span class="token string">&quot;&quot;</span></span><span class="token punctuation">)</span> out<span class="token punctuation">.</span>println <span class="token interpolation-string"><span class="token string">&quot;\${it.annos.replace(&quot;</span></span><span class="token punctuation">[</span><span class="token annotation punctuation">@Id</span><span class="token punctuation">]</span><span class="token interpolation-string"><span class="token string">&quot;, &quot;</span></span><span class="token interpolation-string"><span class="token string">&quot;)}&quot;</span></span>
      out<span class="token punctuation">.</span>println <span class="token interpolation-string"><span class="token string">&quot;\\tprivate </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token expression">it<span class="token punctuation">.</span>type</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token expression">it<span class="token punctuation">.</span>name</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">;&quot;</span></span>
      out<span class="token punctuation">.</span>println <span class="token interpolation-string"><span class="token string">&quot;&quot;</span></span>
  <span class="token punctuation">}</span>
  out<span class="token punctuation">.</span>println <span class="token interpolation-string"><span class="token string">&quot;&quot;</span></span>
<span class="token comment">// 不要Getter Setter</span>
<span class="token comment">//  fields.each() {</span>
<span class="token comment">//    out.println &quot;&quot;</span>
<span class="token comment">//    out.println &quot;  public \${it.type} get\${it.name.capitalize()}() {&quot;</span>
<span class="token comment">//    out.println &quot;    return \${it.name};&quot;</span>
<span class="token comment">//    out.println &quot;  }&quot;</span>
<span class="token comment">//    out.println &quot;&quot;</span>
<span class="token comment">//    out.println &quot;  public void set\${it.name.capitalize()}(\${it.type} \${it.name}) {&quot;</span>
<span class="token comment">//    out.println &quot;    this.\${it.name} = \${it.name};&quot;</span>
<span class="token comment">//    out.println &quot;  }&quot;</span>
<span class="token comment">//    out.println &quot;&quot;</span>
<span class="token comment">//  }</span>
  out<span class="token punctuation">.</span>println <span class="token interpolation-string"><span class="token string">&quot;}&quot;</span></span>
<span class="token punctuation">}</span>



<span class="token keyword">def</span> <span class="token function">calcFields</span><span class="token punctuation">(</span>table<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  DasUtil<span class="token punctuation">.</span><span class="token function">getColumns</span><span class="token punctuation">(</span>table<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> fields<span class="token punctuation">,</span> col <span class="token operator">-&gt;</span>
      <span class="token keyword">def</span> spec <span class="token operator">=</span> Case<span class="token punctuation">.</span>LOWER<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>col<span class="token punctuation">.</span><span class="token function">getDataType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getSpecification</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
      <span class="token keyword">def</span> typeStr <span class="token operator">=</span> typeMapping<span class="token punctuation">.</span>find <span class="token punctuation">{</span> p<span class="token punctuation">,</span> t <span class="token operator">-&gt;</span> p<span class="token punctuation">.</span><span class="token function">matcher</span><span class="token punctuation">(</span>spec<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">.</span>value
      <span class="token keyword">def</span> comm <span class="token operator">=</span> <span class="token punctuation">[</span>
              colName <span class="token punctuation">:</span> col<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
              name    <span class="token punctuation">:</span> <span class="token function">javaName</span><span class="token punctuation">(</span>col<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
              type    <span class="token punctuation">:</span> typeStr<span class="token punctuation">,</span>
              comment<span class="token punctuation">:</span> col<span class="token punctuation">.</span><span class="token function">getComment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
              annos   <span class="token punctuation">:</span> <span class="token interpolation-string"><span class="token string">&quot;\\t@Column(name = \\&quot;&quot;</span></span> <span class="token operator">+</span> col<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token interpolation-string"><span class="token string">&quot;\\&quot; )&quot;</span></span><span class="token punctuation">]</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">&quot;id&quot;</span></span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>Case<span class="token punctuation">.</span>LOWER<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>col<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
          comm<span class="token punctuation">.</span>annos <span class="token operator">+=</span> <span class="token punctuation">[</span><span class="token interpolation-string"><span class="token string">&quot;@Id&quot;</span></span><span class="token punctuation">]</span>
      fields <span class="token operator">+=</span> <span class="token punctuation">[</span>comm<span class="token punctuation">]</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// 这里是处理数据库表前缀的方法，这里处理的是t_xxx命名的表</span>
<span class="token comment">// 已经修改为使用javaName, 如果有需要可以在def className = javaName(table.getName(), true)中修改为javaClassName</span>
<span class="token comment">// 处理类名（这里是因为我的表都是以t_命名的，所以需要处理去掉生成类名时的开头的T，</span>
<span class="token comment">// 如果你不需要去掉表的前缀，那么请查找用到了 javaClassName这个方法的地方修改为 javaName 即可）</span>
<span class="token keyword">def</span> <span class="token function">javaClassName</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> capitalize<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">def</span> s <span class="token operator">=</span> com<span class="token punctuation">.</span>intellij<span class="token punctuation">.</span>psi<span class="token punctuation">.</span>codeStyle<span class="token punctuation">.</span>NameUtil<span class="token punctuation">.</span><span class="token function">splitNameIntoWords</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span>
            <span class="token punctuation">.</span>collect <span class="token punctuation">{</span> Case<span class="token punctuation">.</span>LOWER<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>it<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">capitalize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">}</span>
            <span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">&quot;&quot;</span></span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">replaceAll</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">/[^\\p{javaJavaIdentifierPart}[_]]/</span></span><span class="token punctuation">,</span> <span class="token interpolation-string"><span class="token string">&quot;_&quot;</span></span><span class="token punctuation">)</span>
    <span class="token comment">// 去除开头的T  在Groovy中使用字符串 - 51CTO.COM</span>
    s <span class="token operator">=</span> s<span class="token punctuation">[</span><span class="token number">1</span><span class="token operator">..</span>s<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span>
    capitalize <span class="token operator">||</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">?</span> s <span class="token punctuation">:</span> Case<span class="token punctuation">.</span>LOWER<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> s<span class="token punctuation">[</span><span class="token number">1</span><span class="token operator">..</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span>

<span class="token keyword">def</span> <span class="token function">javaName</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> capitalize<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">def</span> s <span class="token operator">=</span> com<span class="token punctuation">.</span>intellij<span class="token punctuation">.</span>psi<span class="token punctuation">.</span>codeStyle<span class="token punctuation">.</span>NameUtil<span class="token punctuation">.</span><span class="token function">splitNameIntoWords</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span>
    <span class="token punctuation">.</span>collect <span class="token punctuation">{</span> Case<span class="token punctuation">.</span>LOWER<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>it<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">capitalize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">}</span>
    <span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">&quot;&quot;</span></span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">replaceAll</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">/[^\\p{javaJavaIdentifierPart}[_]]/</span></span><span class="token punctuation">,</span> <span class="token interpolation-string"><span class="token string">&quot;_&quot;</span></span><span class="token punctuation">)</span>
  capitalize <span class="token operator">||</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token operator">?</span> s <span class="token punctuation">:</span> Case<span class="token punctuation">.</span>LOWER<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> s<span class="token punctuation">[</span><span class="token number">1</span><span class="token operator">..</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span>

<span class="token keyword">def</span> <span class="token function">isNotEmpty</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> content <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> content<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span>
<span class="token punctuation">}</span>

<span class="token keyword">static</span> String <span class="token function">changeStyle</span><span class="token punctuation">(</span>String str<span class="token punctuation">,</span> <span class="token keyword">boolean</span> toCamel<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>str <span class="token operator">||</span> str<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> str

    <span class="token keyword">if</span> <span class="token punctuation">(</span>toCamel<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        String r <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&#39;_&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>collect <span class="token punctuation">{</span> cc <span class="token operator">-&gt;</span> Case<span class="token punctuation">.</span>LOWER<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>cc<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">capitalize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> r<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> r<span class="token punctuation">[</span><span class="token number">1</span><span class="token operator">..</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        str <span class="token operator">=</span> str<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> str<span class="token punctuation">[</span><span class="token number">1</span><span class="token operator">..</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>
        <span class="token keyword">return</span> str<span class="token punctuation">.</span>collect <span class="token punctuation">{</span> cc <span class="token operator">-&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span> cc<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token string">&#39;_&#39;</span> <span class="token operator">+</span> cc<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> cc <span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">//生成序列化的serialVersionUID</span>
<span class="token keyword">static</span> String <span class="token function">genSerialID</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token interpolation-string"><span class="token string">&quot;\\tprivate static final long serialVersionUID =  &quot;</span></span> <span class="token operator">+</span> Math<span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">nextLong</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token interpolation-string"><span class="token string">&quot;L;&quot;</span></span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2),e=[o];function c(i,l){return s(),a("div",null,e)}const k=n(p,[["render",c],["__file","JPA.html.vue"]]);export{k as default};
