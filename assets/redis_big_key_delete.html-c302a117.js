import{_ as n,W as s,X as a,a1 as e}from"./framework-817d905c.js";const t={},p=e(`<p>最近碰到线上服务器报警，经<code>top</code>命令排查发现，很吃CPU的应用除了MySQL还有Redis，进一步根据进程ID排查发现，Redis的bgsave命令在执行。但是执行速度很慢，而且很耗CPU，绕了一圈发现，Redis的内存已经高达27G了。在确认过哪些Key是可以删除之后，既要着手开始删除数据了。</p><h2 id="一定不能碰的红线" tabindex="-1"><a class="header-anchor" href="#一定不能碰的红线" aria-hidden="true">#</a> <span style="color:red;">一定不能碰的红线</span></h2><ol><li>在线上Redis服务器中，一定能使用<code>Keys</code>命令进行模糊匹配</li></ol><blockquote><p>keys命令会阻塞redis进程（单线程模型），如果key非常多，则阻塞时间非常长。想想就很恐怖了</p></blockquote><ol start="2"><li>从Redis删除Key一定要看清楚，这个Key的大小，例如：Hash的Key，使用<code>hlen key-name</code>来查看大小</li></ol><blockquote><p>大批量删除Key和大key的删除都会阻塞进程，不能一次性全删除，后果非常严重哈</p></blockquote><h2 id="如何扫描key-如何删除key" tabindex="-1"><a class="header-anchor" href="#如何扫描key-如何删除key" aria-hidden="true">#</a> 如何扫描Key，如何删除Key？</h2><h3 id="linux命令渐进式删除" tabindex="-1"><a class="header-anchor" href="#linux命令渐进式删除" aria-hidden="true">#</a> Linux命令渐进式删除</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>redis-cli <span class="token parameter variable">--scan</span> <span class="token parameter variable">--pattern</span> <span class="token string">&quot;key*&quot;</span> <span class="token operator">|</span> <span class="token function">xargs</span> <span class="token parameter variable">-I</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> redis-cli del <span class="token punctuation">{</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这个命令容易遇到一个问题，当Kye里面有乱码的时候，就无法正常删除了。</p><h3 id="python脚本渐进式删除" tabindex="-1"><a class="header-anchor" href="#python脚本渐进式删除" aria-hidden="true">#</a> Python脚本渐进式删除</h3><p>渐进批量删除Key</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> redis

<span class="token comment"># 创建一个连接到本地Redis服务器的连接对象</span>
redis_client <span class="token operator">=</span> redis<span class="token punctuation">.</span>StrictRedis<span class="token punctuation">(</span>host<span class="token operator">=</span><span class="token string">&#39;localhost&#39;</span><span class="token punctuation">,</span> port<span class="token operator">=</span><span class="token number">6379</span><span class="token punctuation">,</span> db<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>
cursor <span class="token operator">=</span> <span class="token number">0</span>
<span class="token keyword">try</span><span class="token punctuation">:</span>
    match_str <span class="token operator">=</span> <span class="token string">&#39;key*&#39;</span>
    count <span class="token operator">=</span> <span class="token number">1000</span>
    counter<span class="token operator">=</span><span class="token number">0</span>
    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>
        result <span class="token operator">=</span> redis_client<span class="token punctuation">.</span>scan<span class="token punctuation">(</span>cursor<span class="token punctuation">,</span> match_str<span class="token punctuation">,</span> count<span class="token punctuation">)</span>
        cursor <span class="token operator">=</span> result<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
        <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>result<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">:</span>
            <span class="token keyword">for</span> subKey <span class="token keyword">in</span> result<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>
                redis_client<span class="token punctuation">.</span>delete<span class="token punctuation">(</span>key<span class="token punctuation">)</span>
            counter <span class="token operator">=</span> counter <span class="token operator">+</span> <span class="token builtin">len</span><span class="token punctuation">(</span>result<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;当前已删除:&quot;</span><span class="token punctuation">,</span> counter<span class="token punctuation">,</span> <span class="token string">&quot;条数据&quot;</span><span class="token punctuation">)</span>
        <span class="token keyword">elif</span> cursor <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>
            <span class="token keyword">break</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;一共删除:&quot;</span><span class="token punctuation">,</span> counter<span class="token punctuation">,</span> <span class="token string">&quot;条数据&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;发生错误&quot;</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span>
<span class="token keyword">finally</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;cursor:&#39;</span><span class="token punctuation">,</span> cursor<span class="token punctuation">)</span>
    <span class="token comment"># 关闭连接</span>
    redis_client<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>渐进删除大HashKey</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> redis

<span class="token comment"># 创建一个连接到本地Redis服务器的连接对象</span>
redis_client <span class="token operator">=</span> redis<span class="token punctuation">.</span>StrictRedis<span class="token punctuation">(</span>host<span class="token operator">=</span><span class="token string">&#39;localhost&#39;</span><span class="token punctuation">,</span> port<span class="token operator">=</span><span class="token number">6379</span><span class="token punctuation">,</span> db<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>
cursor <span class="token operator">=</span> <span class="token number">0</span>
<span class="token keyword">try</span><span class="token punctuation">:</span>
    key<span class="token operator">=</span><span class="token string">&#39;AB_TEST_KEY_STAR&#39;</span>
    match_str <span class="token operator">=</span> <span class="token string">&#39;*&#39;</span>
    count <span class="token operator">=</span> <span class="token number">1000</span>
    counter<span class="token operator">=</span><span class="token number">0</span>
    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>
        result <span class="token operator">=</span> redis_client<span class="token punctuation">.</span>hscan<span class="token punctuation">(</span>key<span class="token punctuation">,</span> cursor<span class="token punctuation">,</span> match_str<span class="token punctuation">,</span> count<span class="token punctuation">)</span>
        cursor <span class="token operator">=</span> result<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
        <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>result<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">:</span>
            <span class="token keyword">for</span> subKey<span class="token punctuation">,</span> value <span class="token keyword">in</span> result<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
                redis_client<span class="token punctuation">.</span>hdel<span class="token punctuation">(</span>key<span class="token punctuation">,</span> subKey<span class="token punctuation">)</span>
            counter <span class="token operator">=</span> counter <span class="token operator">+</span> <span class="token builtin">len</span><span class="token punctuation">(</span>result<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;当前已删除:&quot;</span><span class="token punctuation">,</span> counter<span class="token punctuation">,</span> <span class="token string">&quot;条数据&quot;</span><span class="token punctuation">)</span>
        <span class="token keyword">elif</span> cursor <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>
            <span class="token keyword">break</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;一共删除:&quot;</span><span class="token punctuation">,</span> counter<span class="token punctuation">,</span> <span class="token string">&quot;条数据&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;发生错误&quot;</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span>
<span class="token keyword">finally</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;cursor:&#39;</span><span class="token punctuation">,</span> cursor<span class="token punctuation">)</span>
    <span class="token comment"># 关闭连接</span>
    redis_client<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,15),o=[p];function c(l,i){return s(),a("div",null,o)}const r=n(t,[["render",c],["__file","redis_big_key_delete.html.vue"]]);export{r as default};
