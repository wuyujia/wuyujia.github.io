import{_ as p,W as l,X as o,Y as n,Z as a,$ as e,a2 as t,C as c}from"./framework-aa83d01c.js";const i={},u=t('<h2 id="canal-是什么" tabindex="-1"><a class="header-anchor" href="#canal-是什么" aria-hidden="true">#</a> Canal 是什么？</h2><p>官网的介绍</p><blockquote><p>canal，译意为水道/管道/沟渠，主要用途是基于 MySQL 数据库增量日志解析，提供增量数据订阅和消费。</p></blockquote><p>可以简单地把canal理解为一个用来同步增量数据的一个工具。</p><p>接下来我们看一张官网提供的示意图：</p><figure><img src="https://raw.githubusercontent.com/wuyujia/oss/oss/uPic/2023-05-08/OgapBX.jpg" alt="介绍图" tabindex="0" loading="lazy"><figcaption>介绍图</figcaption></figure><p>canal的工作原理就是把自己伪装成MySQL slave，模拟MySQL slave的交互协议向MySQL Mater发送 dump协议，MySQL mater收到canal发送过来的dump请求，开始推送binary log给canal，然后canal解析binary log，再发送到存储目的地，比如MySQL，Kafka，Elastic Search等等。</p><h2 id="canal-应用场景" tabindex="-1"><a class="header-anchor" href="#canal-应用场景" aria-hidden="true">#</a> Canal 应用场景</h2>',8),r={href:"https://github.com/alibaba/canal?spm=a2c6h.12873639.article-detail.6.487a78a3tkLaD0",target:"_blank",rel:"noopener noreferrer"},d=t(`<p>与其问canal能做什么，不如说数据同步有什么作用。</p><p>但是canal的数据同步不是全量的，而是增量。基于binary log增量订阅和消费，canal可以做：</p><ul><li>数据库镜像</li><li>数据库实时备份</li><li>索引构建和实时维护</li><li>业务cache(缓存)刷新</li><li>带业务逻辑的增量数据处理</li></ul><h2 id="mysql-服务配置修改-重启" tabindex="-1"><a class="header-anchor" href="#mysql-服务配置修改-重启" aria-hidden="true">#</a> MySQL 服务配置修改&amp;重启</h2><p>当前的 canal 支持源端 MySQL 版本包括 5.1.x , 5.5.x , 5.6.x , 5.7.x , 8.0.x</p><p>我的Linux服务器安装的MySQL服务器是5.7版本。</p><p>MySQL的安装这里就不演示了，比较简单，网上也有很多教程。</p><h3 id="创建-canal-用户" tabindex="-1"><a class="header-anchor" href="#创建-canal-用户" aria-hidden="true">#</a> 创建 Canal 用户</h3><p>然后在MySQL中需要创建一个用户，并授权：</p><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>-- 使用命令登录：mysql -u root -p
-- 创建用户 用户名：canal 密码：Canal@123456
create user &#39;canal&#39;@&#39;%&#39; identified by &#39;Canal@123456&#39;;
-- 授权 *.*表示所有库
grant SELECT, REPLICATION SLAVE, REPLICATION CLIENT on *.* to &#39;canal&#39;@&#39;%&#39; identified by &#39;Canal@123456&#39;;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="检查-binlog-是否开启" tabindex="-1"><a class="header-anchor" href="#检查-binlog-是否开启" aria-hidden="true">#</a> 检查 Binlog 是否开启</h3><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>show variables like &#39;log_bin&#39;;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>看到如下结果即位开启:</p><table><thead><tr><th>Variable_name</th><th>Value</th></tr></thead><tbody><tr><td>log_bin</td><td>ON</td></tr></tbody></table><p>若未开启则添加配置</p><div class="language-properties line-numbers-mode" data-ext="properties"><pre class="language-properties"><code>[mysqld]
<span class="token comment"># 打开binlog</span>
<span class="token key attr-name">log-bin</span><span class="token punctuation">=</span><span class="token value attr-value">mysql-bin</span>
<span class="token comment"># 选择ROW(行)模式</span>
<span class="token key attr-name">binlog-format</span><span class="token punctuation">=</span><span class="token value attr-value">ROW</span>
<span class="token comment"># 配置MySQL replaction需要定义，不要和canal的slaveId重复</span>
<span class="token key attr-name">server_id</span><span class="token punctuation">=</span><span class="token value attr-value">1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>确认binlog日志文件列表</p><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>show binary logs;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><table><thead><tr><th>Log_name</th><th>File_size</th></tr></thead><tbody><tr><td>mysql-bin.000040</td><td>1073742171</td></tr><tr><td>mysql-bin.000041</td><td>1073742952</td></tr><tr><td>mysql-bin.000042</td><td>410863200</td></tr></tbody></table><p>查看当前正在写入的binlog文件</p><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>show master status;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>|File|Position| |mysql-bin.000042 |412829327|</p><p>以上就是MySQL服务器所有配置了</p><h2 id="canal-搭建" tabindex="-1"><a class="header-anchor" href="#canal-搭建" aria-hidden="true">#</a> Canal 搭建</h2><h3 id="canal-admin-搭建-未使用" tabindex="-1"><a class="header-anchor" href="#canal-admin-搭建-未使用" aria-hidden="true">#</a> Canal Admin 搭建 (未使用)</h3><p>使用Docker部署</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> pull canal/canal-admin:v1.1.6  
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="canal-文件下载" tabindex="-1"><a class="header-anchor" href="#canal-文件下载" aria-hidden="true">#</a> Canal 文件下载</h3>`,28),k={href:"https://github.com/alibaba/canal/releases/tag/canal-1.1.6",target:"_blank",rel:"noopener noreferrer"},v=n("br",null,null,-1),m=n("code",null,"canal.deployer-1.1.6.tar.gz",-1),b=t(`<h3 id="解压文件" tabindex="-1"><a class="header-anchor" href="#解压文件" aria-hidden="true">#</a> 解压文件</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">tar</span> <span class="token parameter variable">-zxvf</span> canal.deployer-1.1.6.tar.gz
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>解压目录结构</p><blockquote><p>bin 启停脚本<br> conf 重点关注配置项目<br> lib<br> logs<br> plugin</p></blockquote><p>暂时不启动和修改配置，将下面的外部配置新建完成之后再启动canal</p><h3 id="将-binglog-直接对接致-rabbitmq" tabindex="-1"><a class="header-anchor" href="#将-binglog-直接对接致-rabbitmq" aria-hidden="true">#</a> 将 Binglog 直接对接致 RabbitMQ</h3><p>对接MQ之前，需要先将<code>rabbitmq</code>的<code>exchange</code>给新建出来，模式选择：<code>fanout</code> 这种模式类似于广播，可以将消息投递至连接服务端的所有客户端中<br> 取名：exchange.canal.binlog</p><h3 id="修改-canal-配置" tabindex="-1"><a class="header-anchor" href="#修改-canal-配置" aria-hidden="true">#</a> 修改 Canal 配置</h3><p>conf/canal.properties</p><div class="language-properties line-numbers-mode" data-ext="properties"><pre class="language-properties"><code><span class="token comment"># tcp, kafka, rocketMQ, rabbitMQ, pulsarMQ 将 tcp 修改为 rabbitMQ</span>
<span class="token key attr-name">canal.serverMode</span> <span class="token punctuation">=</span> <span class="token value attr-value">rabbitMQ</span>
...
<span class="token comment">##################################################</span>
<span class="token comment">#########                   RabbitMQ         #############</span>
<span class="token comment">##################################################</span>
<span class="token key attr-name">rabbitmq.host</span> <span class="token punctuation">=</span> <span class="token value attr-value">127.0.0.1:5672</span>
<span class="token key attr-name">rabbitmq.virtual.host</span> <span class="token punctuation">=</span> <span class="token value attr-value">/</span>
<span class="token comment"># 这个exchange要提前去rabbitmq新建好，选择fanout模式</span>
<span class="token key attr-name">rabbitmq.exchange</span> <span class="token punctuation">=</span> <span class="token value attr-value">exchange.canal.binlog</span>
<span class="token key attr-name">rabbitmq.username</span> <span class="token punctuation">=</span> <span class="token value attr-value">admin</span>
<span class="token key attr-name">rabbitmq.password</span> <span class="token punctuation">=</span> <span class="token value attr-value">123456</span>
<span class="token key attr-name">rabbitmq.deliveryMode</span> <span class="token punctuation">=</span> <span class="token value attr-value">fanout</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>conf/example/instance.properties</p><div class="language-properties line-numbers-mode" data-ext="properties"><pre class="language-properties"><code><span class="token comment"># 修改地址、binlog文件、binglog 偏移位点来确定要同步的起始内容</span>
<span class="token key attr-name">canal.instance.master.address</span><span class="token punctuation">=</span><span class="token value attr-value">127.0.0.1:3306</span>
<span class="token key attr-name">canal.instance.master.journal.name</span><span class="token punctuation">=</span><span class="token value attr-value">mysql-bin.000001</span>
<span class="token key attr-name">canal.instance.master.position</span><span class="token punctuation">=</span><span class="token value attr-value">168</span>

<span class="token comment"># 用户名/密码</span>
<span class="token key attr-name">canal.instance.dbUsername</span><span class="token punctuation">=</span><span class="token value attr-value">canal</span>
<span class="token key attr-name">canal.instance.dbPassword</span><span class="token punctuation">=</span><span class="token value attr-value">Canal@123456</span>

<span class="token comment"># 监听数据库表</span>
<span class="token key attr-name">canal.instance.filter.regex</span><span class="token punctuation">=</span><span class="token value attr-value">.*\\\\..*</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="创建一个-rabbitmq-监听-exchange" tabindex="-1"><a class="header-anchor" href="#创建一个-rabbitmq-监听-exchange" aria-hidden="true">#</a> 创建一个 RabbitMQ 监听 Exchange</h3><p>SpringBoot2.X 项目 POM 文件</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-amqp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>配置文件</p><div class="language-properties line-numbers-mode" data-ext="properties"><pre class="language-properties"><code><span class="token comment"># rabbitmq config</span>
<span class="token key attr-name">spring.rabbitmq.host</span><span class="token punctuation">=</span><span class="token value attr-value">127.0.0.1</span>
<span class="token key attr-name">spring.rabbitmq.port</span><span class="token punctuation">=</span><span class="token value attr-value">5672</span>
<span class="token key attr-name">spring.rabbitmq.username</span><span class="token punctuation">=</span><span class="token value attr-value">admin</span>
<span class="token key attr-name">spring.rabbitmq.password</span><span class="token punctuation">=</span><span class="token value attr-value">123456</span>
<span class="token key attr-name">spring.rabbitmq.virtual-host</span><span class="token punctuation">=</span><span class="token value attr-value">/</span>
<span class="token comment">## 手动确认消息到达</span>
<span class="token key attr-name">spring.rabbitmq.listener.simple.acknowledge-mode</span><span class="token punctuation">=</span><span class="token value attr-value">manual</span>
<span class="token key attr-name">spring.rabbitmq.listener.simple.concurrency</span><span class="token punctuation">=</span><span class="token value attr-value">5</span>
<span class="token key attr-name">spring.rabbitmq.listener.simple.max-concurrency</span><span class="token punctuation">=</span><span class="token value attr-value">10</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>核心代码(就一个类)</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Component</span>
<span class="token annotation punctuation">@Slf4j</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BinlogConsumer</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@RabbitListener</span><span class="token punctuation">(</span>bindings <span class="token operator">=</span> <span class="token punctuation">{</span>
            <span class="token annotation punctuation">@QueueBinding</span><span class="token punctuation">(</span>
                value <span class="token operator">=</span> <span class="token annotation punctuation">@Queue</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token class-name">QueuesName</span><span class="token punctuation">.</span><span class="token constant">DATA_CENTER</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                exchange <span class="token operator">=</span> <span class="token annotation punctuation">@Exchange</span><span class="token punctuation">(</span>
                        name <span class="token operator">=</span> <span class="token class-name">ExchangesName</span><span class="token punctuation">.</span><span class="token constant">EXCHANGE_CANAL_BINLOG</span><span class="token punctuation">,</span>
                        type <span class="token operator">=</span> <span class="token string">&quot;fanout&quot;</span>
                <span class="token punctuation">)</span>
            <span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token annotation punctuation">@RabbitHandler</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onMessage</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Payload</span> <span class="token class-name">String</span> payload<span class="token punctuation">,</span> <span class="token class-name">Channel</span> channel<span class="token punctuation">,</span> <span class="token annotation punctuation">@Headers</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> headers<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;--------------------------------------&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;消费端Payload: &quot;</span> <span class="token operator">+</span> <span class="token class-name">JSONObject</span><span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span><span class="token class-name">JSONObject</span><span class="token punctuation">.</span><span class="token function">parseObject</span><span class="token punctuation">(</span>payload<span class="token punctuation">,</span> <span class="token class-name">BinlogDTO</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Long</span> deliveryTag <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Long</span><span class="token punctuation">)</span> headers<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">AmqpHeaders</span><span class="token punctuation">.</span><span class="token constant">DELIVERY_TAG</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//手工ACK</span>
        channel<span class="token punctuation">.</span><span class="token function">basicAck</span><span class="token punctuation">(</span>deliveryTag<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>运行项目就可以进行监听了</p><h3 id="启动-canal" tabindex="-1"><a class="header-anchor" href="#启动-canal" aria-hidden="true">#</a> 启动 Canal</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">sh</span> ./bin/startup:.sh
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如果配置无误的话，就能够看到MQ消费信息了。</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code>--------------------------------------
消费端Payload<span class="token operator">:</span> <span class="token punctuation">{</span>
	<span class="token property">&quot;data&quot;</span><span class="token operator">:</span><span class="token punctuation">[</span>
		<span class="token punctuation">{</span>
			<span class="token property">&quot;update_time&quot;</span><span class="token operator">:</span><span class="token string">&quot;2023-05-09 18:08:57&quot;</span><span class="token punctuation">,</span>
			<span class="token property">&quot;id&quot;</span><span class="token operator">:</span><span class="token string">&quot;1&quot;</span><span class="token punctuation">,</span>
			<span class="token property">&quot;delete_flag&quot;</span><span class="token operator">:</span><span class="token string">&quot;0&quot;</span><span class="token punctuation">,</span>
			<span class="token property">&quot;series_course_sku&quot;</span><span class="token operator">:</span><span class="token string">&quot;1&quot;</span><span class="token punctuation">,</span>
			<span class="token property">&quot;create_time&quot;</span><span class="token operator">:</span><span class="token string">&quot;2023-05-09 18:08:09&quot;</span><span class="token punctuation">,</span>
			<span class="token property">&quot;stage_id&quot;</span><span class="token operator">:</span><span class="token string">&quot;1&quot;</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">]</span><span class="token punctuation">,</span>
	<span class="token property">&quot;database&quot;</span><span class="token operator">:</span><span class="token string">&quot;xxx&quot;</span><span class="token punctuation">,</span>
	<span class="token property">&quot;ddl&quot;</span><span class="token operator">:</span><span class="token boolean">false</span><span class="token punctuation">,</span>
	<span class="token property">&quot;old&quot;</span><span class="token operator">:</span><span class="token punctuation">[</span>
		<span class="token punctuation">{</span>
			<span class="token property">&quot;update_time&quot;</span><span class="token operator">:</span><span class="token string">&quot;2023-05-09 18:08:09&quot;</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">]</span><span class="token punctuation">,</span>
	<span class="token property">&quot;table&quot;</span><span class="token operator">:</span><span class="token string">&quot;xxxx&quot;</span><span class="token punctuation">,</span>
	<span class="token property">&quot;ts&quot;</span><span class="token operator">:</span><span class="token number">1683626937769</span><span class="token punctuation">,</span>
	<span class="token property">&quot;type&quot;</span><span class="token operator">:</span><span class="token string">&quot;UPDATE&quot;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="canal-配置优化" tabindex="-1"><a class="header-anchor" href="#canal-配置优化" aria-hidden="true">#</a> Canal 配置优化</h3><p>由于数据计算不需要监听所有表，因此在Canal配置时应当细化要监听的表，修改内容如下：<br> conf/example/instance.properties</p><div class="language-properties line-numbers-mode" data-ext="properties"><pre class="language-properties"><code><span class="token comment"># 监听数据库表 逗号分隔</span>
<span class="token key attr-name">canal.mq.dynamicTopic</span><span class="token punctuation">=</span><span class="token value attr-value">tb_test\\\\.table</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>修改之后数据会被发往: tb_test_table topic，拼接方式为 库名_表名, 这样能有效降低MQ的压力，让消费方只关注需要关注的内容</p><p>服务端消费优化, 只关心某一张表，这样在做JSON序列化时，就能够直接映射为具体实体类了</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@RabbitListener</span><span class="token punctuation">(</span>bindings <span class="token operator">=</span> <span class="token punctuation">{</span>
            <span class="token annotation punctuation">@QueueBinding</span><span class="token punctuation">(</span>
                    value <span class="token operator">=</span> <span class="token annotation punctuation">@Queue</span><span class="token punctuation">(</span><span class="token string">&quot;\${canal.queue}&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                    exchange <span class="token operator">=</span> <span class="token annotation punctuation">@Exchange</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;\${canal.exchange}&quot;</span><span class="token punctuation">,</span> type <span class="token operator">=</span> <span class="token class-name">ExchangeTypes</span><span class="token punctuation">.</span><span class="token constant">TOPIC</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                    key <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&quot;\${canal.topic}_table&quot;</span><span class="token punctuation">}</span>
            <span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@RabbitHandler</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onMessage</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Payload</span> <span class="token class-name">String</span> payload<span class="token punctuation">,</span> <span class="token class-name">Channel</span> channel<span class="token punctuation">,</span> <span class="token annotation punctuation">@Headers</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> headers<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
	<span class="token class-name">System</span><span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;--------------------------------------&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token class-name">System</span><span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;消费端Payload: &quot;</span> <span class="token operator">+</span> payload<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token class-name">Long</span> deliveryTag <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Long</span><span class="token punctuation">)</span> headers<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">AmqpHeaders</span><span class="token punctuation">.</span><span class="token constant">DELIVERY_TAG</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token comment">//手工ACK</span>
	channel<span class="token punctuation">.</span><span class="token function">basicAck</span><span class="token punctuation">(</span>deliveryTag<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="关于-canal-生产环境的恰当配置思考" tabindex="-1"><a class="header-anchor" href="#关于-canal-生产环境的恰当配置思考" aria-hidden="true">#</a> 关于 Canal 生产环境的恰当配置思考</h2><ol><li><p>上面对接MQ的逻辑就已经足够了，大数据量还是用RocketMQ或者Kafka比较好，特别是Kafka，目前生产环境数据链不大，所以无需太过介意使用RabbitMQ<br> 对接MQ主要原因还是因为避免Canal客户端处理延迟导致消费过慢的问题。</p></li><li><p>线上数据不应该监听所有表的变化，应该有目标的监听，否则业务或数据计算无关表大量数据进入，导致MQ消息太多，在消费端也会收到许多无用的消息</p></li></ol><h2 id="参考" tabindex="-1"><a class="header-anchor" href="#参考" aria-hidden="true">#</a> 参考</h2>`,33),g={href:"https://cloud.tencent.com/developer/beta/article/1643293",target:"_blank",rel:"noopener noreferrer"},h={href:"https://zhuanlan.zhihu.com/p/177001630",target:"_blank",rel:"noopener noreferrer"},y={href:"https://blog.csdn.net/qq_26502245/article/details/90445323",target:"_blank",rel:"noopener noreferrer"},q={href:"https://blog.csdn.net/ashic/article/details/104722975",target:"_blank",rel:"noopener noreferrer"};function f(x,_){const s=c("ExternalLinkIcon");return l(),o("div",null,[u,n("p",null,[a("参考"),n("a",r,[a("官网"),e(s)])]),d,n("p",null,[a("我用的是1.1.6版本："),n("a",k,[a("下载地址"),e(s)]),v,a(" 下载文件："),m]),b,n("ul",null,[n("li",null,[n("a",g,[a("【开源实战】Canal生产环境部署常见问题分析"),e(s)])]),n("li",null,[n("a",h,[a("超详细canal入门，看这篇就够了"),e(s)])]),n("li",null,[n("a",y,[a("canal配置详解"),e(s)])]),n("li",null,[n("a",q,[a("canal dynamicTopic 问题"),e(s)])])])])}const C=p(i,[["render",f],["__file","Canal.html.vue"]]);export{C as default};
