import{_ as a,W as n,X as s,a2 as t}from"./framework-aa83d01c.js";const e={},l=t(`<h2 id="算数运算符" tabindex="-1"><a class="header-anchor" href="#算数运算符" aria-hidden="true">#</a> 算数运算符</h2><ul><li>+</li><li>-：对单个数字使用表示负数</li><li>*</li><li>\\：只包含整数时，为整数除法，否则为浮点数除法</li></ul><div class="hint-container warning"><p class="hint-container-title">注意</p><p>1/0将会产生一个<code>除0异常</code>，浮点数除以0会得到无穷大（Infinity）或 NaN 的结果</p></div><ul><li>%：取余，也称取模，也可以使用<code>Math.floorMod</code>方法来实现取模，但要注意负数取模，一般也很少遇到</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span> <span class="token operator">-</span><span class="token number">11</span> <span class="token operator">%</span> <span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// -11</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">floorMod</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>更多的运算需要借助<code>Math</code>工具类来实现</p><p>如果需要<mark>更严格的</mark>计算，可以采用<code>StrictMath</code>类来实现相同的算法，Math工具类采用平台计算，在浮点计算时，精度准确性都无法保障，但是性能会更好。</p><h2 id="逻辑运算符" tabindex="-1"><a class="header-anchor" href="#逻辑运算符" aria-hidden="true">#</a> 逻辑运算符</h2><ul><li>&amp;&amp;：逻辑与，具有短路作用，如果第一个表达式为false，则执行后续表达式的运算</li><li>||：逻辑或，同上</li><li>!：逻辑非</li></ul><h2 id="位运算符" tabindex="-1"><a class="header-anchor" href="#位运算符" aria-hidden="true">#</a> 位运算符</h2><ul><li>&amp;：且，利用&amp;可以只保留需要的位，掩掉其它位，如：7 &amp; 0b100 = 4</li><li>|：或，对应bit位上，有1则为1，否则为0</li><li>^：异或，对应bit位上，均为1则位0，否则不同则位1</li><li>～：按位取反</li><li>&gt;&gt;： 有符号右移</li><li>&lt;&lt;：左移，例如，整型int，1 &lt;&lt; 35 的具体执行逻辑是：1 &lt;&lt; (35 % 32) = 1 &lt;&lt; 3 = 8</li><li>&gt;&gt;&gt;：无符号右移</li></ul><h2 id="三目运算符" tabindex="-1"><a class="header-anchor" href="#三目运算符" aria-hidden="true">#</a> 三目运算符</h2><p><code>a == b ? a : b</code></p>`,13),i=[l];function p(c,o){return n(),s("div",null,i)}const r=a(e,[["render",p],["__file","2-运算符.html.vue"]]);export{r as default};
